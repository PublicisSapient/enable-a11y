0:00:00.559,0:00:04.849
in this video I will be demonstrating
how to create an accessible modal dialog

0:00:04.849,0:00:09.980
using the html5 dialog tag it uses a
polyfill for browsers that don't support

0:00:09.980,0:00:14.629
it yet natively for details on the
polyfill and more information on how

0:00:14.629,0:00:18.710
this demo was built please check out the
videos accompanying blog post on user

0:00:18.710,0:00:24.530
agent mancom the first browser we're
going to demonstrate is safari using

0:00:24.530,0:00:29.930
voiceover which is built into OSX right
now keyboard focus is on the link just

0:00:29.930,0:00:34.100
before the button labeled login to our
website which will open the modal win

0:00:34.100,0:00:39.769
pressed so let's use the keyboard to
navigate to the button log in to our

0:00:39.769,0:00:44.210
website button main two items and now
we'll hit the enter key close this

0:00:44.210,0:00:47.449
dialog button web I log in one item in
order to continue please log in to the

0:00:47.449,0:00:52.219
application you may have noticed that
when the dialog opened the close button

0:00:52.219,0:00:57.519
gained focus also note that the screen
reader said close this dialog button

0:00:57.519,0:01:02.569
this tells the screen reader user that
focuses on a button labeled close this

0:01:02.569,0:01:07.700
dialog incidentally this label was coded
as an alt attribute for the buttons

0:01:07.700,0:01:13.040
image tag you'll also note that the
screen reader reports it as a web

0:01:13.040,0:01:19.219
dialogue that's because the button is
inside an HTML dialogue tag voiceover

0:01:19.219,0:01:22.700
would also announce this if the modal
was coded as a div tag with its role

0:01:22.700,0:01:27.710
attributes at the dialogue in fact
setting the role to dialogue is what the

0:01:27.710,0:01:31.850
polyfill does on all dialog tags so
screen readers can report the dialogue

0:01:31.850,0:01:35.539
properly to the user
finally you will notice the screen

0:01:35.539,0:01:40.009
reader reads out the header and the
description in the dialogue this happens

0:01:40.009,0:01:44.090
because the dialogue tag has its Aria
labeled by attribute set to the ID of

0:01:44.090,0:01:48.020
the header and as Aria described by
attribute set to the ID of the

0:01:48.020,0:01:54.740
description text now let's find out what
happens when we tab past the end of the

0:01:54.740,0:02:00.310
dialog username edit text mobile menu do
a password secure

0:02:00.310,0:02:05.250
with a cancel button you are confirmed
button you are closed a silent button

0:02:05.250,0:02:10.149
you'll notice that when I hit the tab
key after the confirm button focus goes

0:02:10.149,0:02:14.590
to the first element in the dialogue
focus never goes to any interactive

0:02:14.590,0:02:19.180
element behind the modal for browsers
that support the dialog tag this

0:02:19.180,0:02:23.560
automatically happens because it is
native browser behavior however for

0:02:23.560,0:02:28.300
browsers that don't the polyfill steps
in and uses focus events to implement

0:02:28.300,0:02:31.420
this
if focus goes outside the dialog it

0:02:31.420,0:02:35.140
loops back to the first element of the
modal if we are tapping forward of

0:02:35.140,0:02:40.510
course if we are tabbing backward using
a shift tab then focus goes to the last

0:02:40.510,0:02:45.330
element of the modal and now let's find
out what happens when I close the modal

0:02:45.330,0:02:50.019
login to our web site button to items
you'll notice that focus is placed back

0:02:50.019,0:02:53.620
to the button that opened it
surprisingly this is not the fault rouse

0:02:53.620,0:02:57.459
or behavior even though this is
considered best practice in the wai-aria

0:02:57.459,0:03:02.230
documentation it is added by a bit of
code in the polyfill the code is

0:03:02.230,0:03:06.070
executed for all browsers including
those with native support for the dialog

0:03:06.070,0:03:10.650
tag now let's look at google chrome
using androids built-in screen reader

0:03:10.650,0:03:19.150
talkback I am using a Samsung tablet for
this demonstration but the behavior for

0:03:19.150,0:03:23.799
this device is more or less the same on
any Android device using this software

0:03:23.799,0:03:27.819
I'm going to start by navigating to the
link just before the button that opens

0:03:27.819,0:03:32.950
the modal since this device doesn't have
a keyboard talkback users must swipe

0:03:32.950,0:03:39.519
left and right to navigate back and
forth within the document list to mine

0:03:39.519,0:03:46.750
this example use it by creating
accessible html5 modal dialogues for

0:03:46.750,0:03:54.239
desktop and mobile link TT login to our
web site button out of lists double tap

0:03:54.239,0:03:58.209
you'll also note that it looks like
focus is not just going to the

0:03:58.209,0:04:02.019
interactive elements of the page like
the tab key does on a keyboard enable

0:04:02.019,0:04:08.560
device instead talkback so-called
accessibility focus goes to all items on

0:04:08.560,0:04:13.689
the page that can be read this is
default behavior for talkback and iOS is

0:04:13.689,0:04:16.750
voiceover
screenreader has similar behavior this

0:04:16.750,0:04:19.690
can be changed but I will leave that for
a future video

0:04:19.690,0:04:27.040
now let's double tap to activate this
button close this dialogue double tap to

0:04:27.040,0:04:33.190
activate again you will notice that
focus goes to the close button however

0:04:33.190,0:04:37.600
unlike voiceover talkback didn't read
the dialogues heading or the description

0:04:37.600,0:04:42.190
it also doesn't mention that you are now
inside a web dialogue this is because

0:04:42.190,0:04:46.630
different screen readers don't support
all the Aria attributes equally this is

0:04:46.630,0:04:50.590
the reason why you chose close this
dialogue as the alt attribute for the

0:04:50.590,0:04:55.090
close button image it tells the user
that they are inside a dialogue even if

0:04:55.090,0:04:59.740
a particular screen reader doesn't
support the dialogue role this is a good

0:04:59.740,0:05:03.940
example that just like at all aspects of
web development you should use

0:05:03.940,0:05:08.440
progressive enhancement to make your
code bulletproof now let's try to swipe

0:05:08.440,0:05:14.200
backwards past the close button at the
beginning of the dialogue an accessible

0:05:14.200,0:05:19.900
modal dialogue using the html5 dialogue
tag webview you'll notice that focus

0:05:19.900,0:05:23.910
doesn't go behind the modal just like
when I was using a desktop screen reader

0:05:23.910,0:05:29.380
however this is not because of the focus
events I described earlier the problem

0:05:29.380,0:05:33.610
with most if not all mobile screen
readers is that they don't fire focus

0:05:33.610,0:05:37.510
and blur events back to the browser when
swiping over the document in order to

0:05:37.510,0:05:42.760
code this behavior on mobile developers
must set Aria hidden equals true to all

0:05:42.760,0:05:47.770
elements outside of the modal dialog
this may seem a little scary if there's

0:05:47.770,0:05:52.180
a lot of interactive elements outside
the dialog I mean who wants to set Aria

0:05:52.180,0:05:57.190
hidden attributes on all of those Dom
notes however there is an efficient

0:05:57.190,0:06:01.870
algorithm to do this and is in the blog
post that accompanies this video if you

0:06:01.870,0:06:05.710
are playing this video on the YouTube
website the link to the post is in the

0:06:05.710,0:06:10.330
description below it hope this
demonstration was helpful please feel

0:06:10.330,0:06:15.280
free to comment on my youtube page or my
blog user-agent mancom I'd love to hear

0:06:15.280,0:06:18.960
your feedback thank you
