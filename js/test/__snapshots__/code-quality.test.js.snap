// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Quality Page Tests Initial page load HTML matches snapshot 1`] = `
"<!DOCTYPE html><html lang="en"><head>
    
<meta charset="utf-8">
<title>Accessible Code Quality - The Enable Project</title>

<meta property="og:title" content="Accessible Code Quality">
<meta property="og:description" content="What are the automated tools we use in Enable to ensure code quality.">
<meta property="og:image" content="/images/posters/code-quality.jpg?1">
<meta property="og:url" content="/code-quality.php">
<meta property="og:type" content="article">
<meta property="og:alt" content="">
<meta property="article:author" content="Zoltan Hawryluk">


<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:description" content="What are the automated tools we use in Enable to ensure code quality.">
<meta name="twitter:title" content="Accessible Code Quality">
<meta name="twitter:image" content="/images/posters/code-quality.jpg">


<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">


<!-- These two stylesheets are for the code walkthroughs -->
<link id="showcode-css" rel="stylesheet" type="text/css" href="css/showcode.css">

<!-- This is the global stylesheet -->
<link id="all-css" rel="stylesheet" href="css/shared/all.css">
<link id="read-all-css" rel="stylesheet" href="css/shared/read-more.css">

<!-- hamburger menu -->
<link id="hamburger-style" rel="stylesheet" type="text/css" href="css/enable-hamburger.css">

<!-- Skip links styles -->
<link id="enable-skip-link-style" href="css/enable-visible-on-focus.css" rel="stylesheet">

<link id="site-css" rel="stylesheet" href="css/site.css">


<link id="pause-anim-css-demo" rel="stylesheet" href="css/pause-animations-demo.css">

  <link id="pause-anim-css" rel="stylesheet" href="css/pause-anim-control.css">

    <link rel="stylesheet" type="text/css" href="css/figure.css"></head>

<body class="pause-anim-control__prefers-motion"><iframe aria-hidden="true" tabindex="-1" title="Text Zoom Event Iframe" style="width: 1em; height: 1px; border-width: 0px; position: absolute; overflow: hidden; white-space: nowrap; margin: -1px;"></iframe>
  
  <div role="banner">
  <div class="enable-mobile-visible-on-focus__container enable-skip-link--begin">
    <a href="#main" id="beginning-of-nav" class="enable-mobile-visible-on-focus enable-skip-link">
      Skip to Main Content
    </a>
  </div>

  <div class="enable-logo__container">
    <a class="enable-logo__link" href="index.php">
        <img class="enable-logo" src="images/ENABLE.svg" alt="" role="presentation">
        <span class="enable-logo__text">Enable</span>
    </a>
</div>



  <!-- Here is the main menu -->
  <div id="enable-hamburger-menu" data-component="EnableFlyoutHamburger" data-props-id="flyout-props">
        <nav class="site__nav enable-flyout__container" aria-label="main">
          <button aria-label="main menu" class="enable-flyout__open-menu-button" aria-expanded="false" aria-controls="mobile-menu">

                  <!-- This is the hamburger menu icon -->

                  <span class="enable-flyout__hamburger-icon">
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                  </span>
              </button>
          <div id="mobile-menu" class="enable-flyout enable-flyout__top-level enable-flyout__level enable-flyout--initialized">
            <button class="enable-flyout__hamburger-icon-facade">
                    <span class="sr-only">
                        close mobile flyout
                    </span>
                </button>

            <!-- Here is where the content is placed -->
            
        <ul class="enable-flyout__list">
          
        <li class="enable-flyout__menu-item">
          <a href="index.php" class="enable-flyout__link enable-flyout__with-home-icon mobile-and-tablet">
              Home
          </a>
        </li>
      
        <li class="enable-flyout__menu-item ">
          <a href="faq.php" class="enable-flyout__link">
            FAQ
          </a>
        </li>
      
        <li class="enable-flyout__menu-item ">
          <a href="code-quality.php" class="enable-flyout__link">
            Accessible Code Quality
          </a>
        </li>
      
        <li class="enable-flyout__menu-item ">
          <a href="acknowledgements.php" class="enable-flyout__link">
            Credits
          </a>
        </li>
      
        <li class="enable-flyout__menu-item enable-flyout__last-top-level-link">
          <a href="bookmarklets.php" class="enable-flyout__link">
            Bookmarklets
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Forms -->
          <button aria-expanded="false" aria-controls="forms-section" class="enable-flyout__open-level-button">
            Forms
          </button>
          <div id="forms-section" aria-label="Forms" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list my-custom-list__layout ">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
               <button class="enable-flyout__close-level-button">
                Go Back 
               </button>
              </li>
            
               <!-- Start menu items for section Forms -->
               
        <li class="enable-flyout__menu-item">
          <!-- Begin section Form Elements -->
          <button aria-expanded="false" aria-controls="form-controls-subsection" class="enable-flyout__open-level-button">
            Form Elements
          </button>
          <div class="enable-flyout__level-heading">Form Elements</div>
            <div id="form-controls-subsection" aria-label="Form Elements" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Form Elements -->
              
        <li class="enable-flyout__menu-item">
          <a href="button.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/button.webp" type="image/webp">
              <img src="button.png" alt="" class="enable-flyout__link-image">
            </picture>
            Button
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="checkbox.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/checkbox.webp" type="image/webp">
              <img src="checkbox.png" alt="" class="enable-flyout__link-image">
            </picture>
            Checkboxes
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="radiogroup.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/radiogroup.webp" type="image/webp">
              <img src="radiogroup.png" alt="" class="enable-flyout__link-image">
            </picture>
            Radio Button Group
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="listbox.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/listbox.webp" type="image/webp">
              <img src="listbox.png" alt="" class="enable-flyout__link-image">
            </picture>
            Select Box / Listbox
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="textbox.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/textbox.webp" type="image/webp">
              <img src="textbox.png" alt="" class="enable-flyout__link-image">
            </picture>
            Textbox
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="combobox.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/combobox.webp" type="image/webp">
              <img src="combobox.png" alt="" class="enable-flyout__link-image">
            </picture>
            Autocomplete Combobox
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="slider.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/slider.webp" type="image/webp">
              <img src="slider.png" alt="" class="enable-flyout__link-image">
            </picture>
            Slider / Range Input
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="spinner.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/spinner.webp" type="image/webp">
              <img src="spinner.png" alt="" class="enable-flyout__link-image">
            </picture>
            Number Input Spinner
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Form UX Patterns -->
          <button aria-expanded="false" aria-controls="form-ux-patterns-subsection" class="enable-flyout__open-level-button">
            Form UX Patterns
          </button>
          <div class="enable-flyout__level-heading">Form UX Patterns</div>
            <div id="form-ux-patterns-subsection" aria-label="Form UX Patterns" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Form UX Patterns -->
              
        <li class="enable-flyout__menu-item">
          <a href="form.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/form.webp" type="image/webp">
              <img src="form.png" alt="" class="enable-flyout__link-image">
            </picture>
            Accessible Form Structure
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="form-error-checking.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/form-error-checking.webp" type="image/webp">
              <img src="form-error-checking.png" alt="" class="enable-flyout__link-image">
            </picture>
            Form Error Checking
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="search.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/search.webp" type="image/webp">
              <img src="search.png" alt="" class="enable-flyout__link-image">
            </picture>
            Search Forms
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="input-mask.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/input-mask.webp" type="image/webp">
              <img src="input-mask.png" alt="" class="enable-flyout__link-image">
            </picture>
            Input Masking
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Controls -->
          <button aria-expanded="false" aria-controls="controls-section" class="enable-flyout__open-level-button">
            Controls
          </button>
          <div id="controls-section" aria-label="Controls" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list my-custom-list__layout ">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
               <button class="enable-flyout__close-level-button">
                Go Back 
               </button>
              </li>
            
               <!-- Start menu items for section Controls -->
               
        <li class="enable-flyout__menu-item">
          <!-- Begin section Simple Controls -->
          <button aria-expanded="false" aria-controls="simple-controls-subsection" class="enable-flyout__open-level-button">
            Simple Controls
          </button>
          <div class="enable-flyout__level-heading">Simple Controls</div>
            <div id="simple-controls-subsection" aria-label="Simple Controls" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Simple Controls -->
              
        <li class="enable-flyout__menu-item">
          <a href="link.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/link.webp" type="image/webp">
              <img src="link.png" alt="" class="enable-flyout__link-image">
            </picture>
            Link
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="dropdown.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/dropdown.webp" type="image/webp">
              <img src="dropdown.png" alt="" class="enable-flyout__link-image">
            </picture>
            Dropdown / Drawer / Expando
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="tooltip.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/tooltip.webp" type="image/webp">
              <img src="tooltip.png" alt="" class="enable-flyout__link-image">
            </picture>
            Tooltip
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="switch.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/switch.webp" type="image/webp">
              <img src="switch.png" alt="" class="enable-flyout__link-image">
            </picture>
            Switch
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="skip-link.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/skip-link.webp" type="image/webp">
              <img src="skip-link.png" alt="" class="enable-flyout__link-image">
            </picture>
            Skip Links
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Complex Controls -->
          <button aria-expanded="false" aria-controls="complex-controls-subsection" class="enable-flyout__open-level-button">
            Complex Controls
          </button>
          <div class="enable-flyout__level-heading">Complex Controls</div>
            <div id="complex-controls-subsection" aria-label="Complex Controls" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Complex Controls -->
              
        <li class="enable-flyout__menu-item">
          <a href="carousel.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/carousel.webp" type="image/webp">
              <img src="carousel.png" alt="" class="enable-flyout__link-image">
            </picture>
            Carousel
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="multi-level-hamburger-menu.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/multi-level-hamburger-menu.webp" type="image/webp">
              <img src="multi-level-hamburger-menu.png" alt="" class="enable-flyout__link-image">
            </picture>
            Flyout Hamburger Menu
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="dialog.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/dialog.webp" type="image/webp">
              <img src="dialog.png" alt="" class="enable-flyout__link-image">
            </picture>
            Modal Dialog
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="tabs.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/tabs.webp" type="image/webp">
              <img src="tabs.png" alt="" class="enable-flyout__link-image">
            </picture>
            Tablist
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="video-player.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/video-player.webp" type="image/webp">
              <img src="video-player.png" alt="" class="enable-flyout__link-image">
            </picture>
            Video Player
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Content -->
          <button aria-expanded="false" aria-controls="content-section" class="enable-flyout__open-level-button">
            Content
          </button>
          <div id="content-section" aria-label="Content" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list my-custom-list__layout enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
               <button class="enable-flyout__close-level-button">
                Go Back 
               </button>
              </li>
            
               <!-- Start menu items for section Content -->
               
        <li class="enable-flyout__menu-item">
          <!-- Begin section Static Content -->
          <button aria-expanded="false" aria-controls="static-content-subsection" class="enable-flyout__open-level-button">
            Static Content
          </button>
          <div class="enable-flyout__level-heading">Static Content</div>
            <div id="static-content-subsection" aria-label="Static Content" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Static Content -->
              
        <li class="enable-flyout__menu-item">
          <a href="description-list.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/description-list.webp" type="image/webp">
              <img src="description-list.png" alt="" class="enable-flyout__link-image">
            </picture>
            Description List
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="progress.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/progress.webp" type="image/webp">
              <img src="progress.png" alt="" class="enable-flyout__link-image">
            </picture>
            Progress Bar
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="img.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/img.webp" type="image/webp">
              <img src="img.png" alt="" class="enable-flyout__link-image">
            </picture>
            Image
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="figure.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/figure.webp" type="image/webp">
              <img src="figure.png" alt="" class="enable-flyout__link-image">
            </picture>
            Figure
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="heading.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/heading.webp" type="image/webp">
              <img src="heading.png" alt="" class="enable-flyout__link-image">
            </picture>
            Headings
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="screen-reader-only-text.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/screen-reader-only-text.webp" type="image/webp">
              <img src="screen-reader-only-text.png" alt="" class="enable-flyout__link-image">
            </picture>
            Screen Reader Only Text
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="reflow.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/reflow.webp" type="image/webp">
              <img src="reflow.png" alt="" class="enable-flyout__link-image">
            </picture>
            Reflow
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Animated Content -->
          <button aria-expanded="false" aria-controls="animated-content-subsection" class="enable-flyout__open-level-button">
            Animated Content
          </button>
          <div class="enable-flyout__level-heading">Animated Content</div>
            <div id="animated-content-subsection" aria-label="Animated Content" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Animated Content -->
              
        <li class="enable-flyout__menu-item">
          <a href="animated-gif-with-pause-button.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/animated-gif-with-pause-button.webp" type="image/webp">
              <img src="animated-gif-with-pause-button.png" alt="" class="enable-flyout__link-image">
            </picture>
            Animated GIF/WEBP
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="pause-anim-control.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/pause-anim-control.webp" type="image/webp">
              <img src="pause-anim-control.png" alt="" class="enable-flyout__link-image">
            </picture>
            Pause All Animations Control
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="video-content.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/video-content.webp" type="image/webp">
              <img src="video-content.png" alt="" class="enable-flyout__link-image">
            </picture>
            Video Content
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Tables -->
          <button aria-expanded="false" aria-controls="tables-subsection" class="enable-flyout__open-level-button">
            Tables
          </button>
          <div class="enable-flyout__level-heading">Tables</div>
            <div id="tables-subsection" aria-label="Tables" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Tables -->
              
        <li class="enable-flyout__menu-item">
          <a href="table.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/table.webp" type="image/webp">
              <img src="table.png" alt="" class="enable-flyout__link-image">
            </picture>
            Simple Table Examples
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="sortable-table.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/sortable-table.webp" type="image/webp">
              <img src="sortable-table.png" alt="" class="enable-flyout__link-image">
            </picture>
            Sortable Table
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="pagination-table.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/pagination-table.webp" type="image/webp">
              <img src="pagination-table.png" alt="" class="enable-flyout__link-image">
            </picture>
            Pagination Table
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Code Patterns -->
          <button aria-expanded="false" aria-controls="code-patterns-section" class="enable-flyout__open-level-button">
            Code Patterns
          </button>
          <div id="code-patterns-section" aria-label="Code Patterns" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list my-custom-list__layout ">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
               <button class="enable-flyout__close-level-button">
                Go Back 
               </button>
              </li>
            
               <!-- Start menu items for section Code Patterns -->
               
        <li class="enable-flyout__menu-item">
          <!-- Begin section Focus Management -->
          <button aria-expanded="false" aria-controls="focus-management-subsection" class="enable-flyout__open-level-button">
            Focus Management
          </button>
          <div class="enable-flyout__level-heading">Focus Management</div>
            <div id="focus-management-subsection" aria-label="Focus Management" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Focus Management -->
              
        <li class="enable-flyout__menu-item">
          <a href="form-error-checking.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/form-error-checking.webp" type="image/webp">
              <img src="form-error-checking.png" alt="" class="enable-flyout__link-image">
            </picture>
            Form Error Checking
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="focus-styling.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/focus-styling.webp" type="image/webp">
              <img src="focus-styling.png" alt="" class="enable-flyout__link-image">
            </picture>
            Focus Styling Tips
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section Typography -->
          <button aria-expanded="false" aria-controls="typography-subsection" class="enable-flyout__open-level-button">
            Typography
          </button>
          <div class="enable-flyout__level-heading">Typography</div>
            <div id="typography-subsection" aria-label="Typography" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section Typography -->
              
        <li class="enable-flyout__menu-item">
          <a href="text-resize.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/text-resize.webp" type="image/webp">
              <img src="text-resize.png" alt="" class="enable-flyout__link-image">
            </picture>
            Basic Resizable Text
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="text-spacing.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/text-spacing.webp" type="image/webp">
              <img src="text-spacing.png" alt="" class="enable-flyout__link-image">
            </picture>
            Accessible Text Spacing
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="hero-image-text-resize.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/hero-image-text-resize.webp" type="image/webp">
              <img src="hero-image-text-resize.png" alt="" class="enable-flyout__link-image">
            </picture>
            Resizing Text in Hero Images
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="accessible-text-svg.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/accessible-text-svg.webp" type="image/webp">
              <img src="accessible-text-svg.png" alt="" class="enable-flyout__link-image">
            </picture>
            Accessible Text in SVGs
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="exposing-style-info-to-screen-readers.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/exposing-style-info-to-screen-readers.webp" type="image/webp">
              <img src="exposing-style-info-to-screen-readers.png" alt="" class="enable-flyout__link-image">
            </picture>
            Exposing Style Information To Screen Readers
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
        <li class="enable-flyout__menu-item">
          <!-- Begin section ARIA Live Regions -->
          <button aria-expanded="false" aria-controls="aria-live-regions-subsection" class="enable-flyout__open-level-button">
            ARIA Live Regions
          </button>
          <div class="enable-flyout__level-heading">ARIA Live Regions</div>
            <div id="aria-live-regions-subsection" aria-label="ARIA Live Regions" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section ARIA Live Regions -->
              
        <li class="enable-flyout__menu-item">
          <a href="alert.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/alert.webp" type="image/webp">
              <img src="alert.png" alt="" class="enable-flyout__link-image">
            </picture>
            Alert
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="log.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/log.webp" type="image/webp">
              <img src="log.png" alt="" class="enable-flyout__link-image">
            </picture>
            Log
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="timer.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/timer.webp" type="image/webp">
              <img src="timer.png" alt="" class="enable-flyout__link-image">
            </picture>
            Timer
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="marquee.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/marquee.webp" type="image/webp">
              <img src="marquee.png" alt="" class="enable-flyout__link-image">
            </picture>
            Marquee
          </a>
        </li>
      
        <li class="enable-flyout__menu-item">
          <a href="status.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/status.webp" type="image/webp">
              <img src="status.png" alt="" class="enable-flyout__link-image">
            </picture>
            Status
          </a>
        </li>
      
            </ul>
          </div>
        </li>
      
            </ul>
          </div>
        </li>
      
        </ul>
      

          </div>
        </nav>
        <span class="enable-flyout__overlay-screen">
        </span>
      </div>

  <!-- MAIN MENU TEMPLATES -->
  <template id="flyout__root">
        <ul class="enable-flyout__list">
          \${html:content}
        </ul>
      </template>

      <template id="flyout__submenu">
        <ul class="enable-flyout__list  enable-flyout__list--photo-layout">
          <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
            <button class="enable-flyout__close-level-button">
              Go Back
            </button>
          </li>
          
          \${html:content}
          </ul>
      </template>

      <template id="flyout__button">
        <li class="enable-flyout__menu-item">
          <!-- Begin section \${sectionName} -->
          <button aria-expanded="false" aria-controls="\${id}-section" class="enable-flyout__open-level-button">
            \${sectionName}
          </button>
          <div id="\${id}-section" aria-label="\${sectionName}" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list my-custom-list__layout \${classes}">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
               <button class="enable-flyout__close-level-button">
                Go Back 
               </button>
              </li>
            
               <!-- Start menu items for section \${sectionName} -->
               \${html:content}
            </ul>
          </div>
        </li>
      </template>

      <template id="flyout__home">
        <li class="enable-flyout__menu-item">
          <a href="index.php" class="enable-flyout__link enable-flyout__with-home-icon mobile-and-tablet">
              Home
          </a>
        </li>
      </template>

      <template id="flyout__link">
        <li class="enable-flyout__menu-item">
          <a href="\${url-slug}.php" class="enable-flyout__link">
            <picture>
              <source srcset="images/main-menu/\${url-slug}.webp" type="image/webp">
              <img src="\${url-slug}.png" alt="\${alt}" class="enable-flyout__link-image">
            </picture>
            \${label}
          </a>
        </li>
      </template>

      <template id="flyout__link--no-image">
        <li class="enable-flyout__menu-item \${listItemClasses}">
          <a href="\${url}" class="enable-flyout__link">
            \${label}
          </a>
        </li>
      </template>

      <template id="flyout__link--with-icon">
        <li class="enable-flyout__menu-item">
          <a href="\${url}" class="enable-flyout__link">
            <img alt="\${alt}" src="\${src}">
            \${label}
          </a>
        </li>
      </template>

      <template id="flyout__heading">
        <div class="enable-flyout__level-heading">\${label}</div>
      </template>

      <template id="flyout__subsection">
        <li class="enable-flyout__menu-item">
          <!-- Begin section \${sectionName} -->
          <button aria-expanded="false" aria-controls="\${id}-subsection" class="enable-flyout__open-level-button">
            \${sectionName}
          </button>
          <div class="enable-flyout__level-heading">\${sectionName}</div>
            <div id="\${id}-subsection" aria-label="\${sectionName}" role="group" class="enable-flyout enable-flyout__level enable-flyout__dropdown">
            <button class="enable-flyout__hamburger-icon-facade">
              <span class="sr-only">
                close mobile flyout
              </span>
            </button>
            <ul class="enable-flyout__list enable-flyout__list--photo-layout">
              <li class="enable-flyout__menu-item enable-flyout__menu-item--close">
                <button class="enable-flyout__close-level-button">
                  Go Back
                </button>
              </li>
              
              <!-- Start menu items for section \${sectionName} -->
              \${html:content}
            </ul>
          </div>
        </li>
      </template>

      <template id="flyout__container">
        <nav class="site__nav enable-flyout__container" aria-label="main">
          <button aria-label="main menu" class="enable-flyout__open-menu-button" aria-expanded="false" aria-controls="mobile-menu">

                  <!-- This is the hamburger menu icon -->

                  <span class="enable-flyout__hamburger-icon">
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                      <span>
                      </span>
                  </span>
              </button>
          <div id="mobile-menu" class="enable-flyout enable-flyout__top-level enable-flyout__level">
            <button class="enable-flyout__hamburger-icon-facade">
                    <span class="sr-only">
                        close mobile flyout
                    </span>
                </button>

            <!-- Here is where the content is placed -->
            \${html:content}

          </div>
        </nav>
        <span class="enable-flyout__overlay-screen">
        </span>
      </template>

      <!-- MAIN MENU ROOT -->

      <!-- Here is the main menu -->
      <div data-component="FlyoutMenu" data-props-id="flyout-props">

      </div>

      <!-- id, props, content -->
      <script id="flyout-props" type="application/json">
      {
    "content": [
        {
            "id": "flyout__container",
            "content": [
                {
                    "id": "flyout__root",
                    "content": [
                        {
                            "id": "flyout__home"
                        },
                        {
                            "id": "flyout__link--no-image",
                            "props": {
                                "label": "FAQ",
                                "url": "faq.php"
                            }
                        },
                        {
                            "id": "flyout__link--no-image",
                            "props": {
                                "label": "Accessible Code Quality",
                                "url": "code-quality.php"
                            }
                        },
                        {
                            "id": "flyout__link--no-image",
                            "props": {
                                "label": "Credits",
                                "url": "acknowledgements.php"
                            }
                        },
                        {
                            "id": "flyout__link--no-image",
                            "props": {
                                "label": "Bookmarklets",
                                "url": "bookmarklets.php",
                                "listItemClasses": "enable-flyout__last-top-level-link"
                            }
                        },

                        {
                            "id": "flyout__button",
                            "props": {
                                "id": "forms",
                                "sectionName": "Forms"
                            },
                            "content": [
                                {
                                    "id": "flyout__subsection",
                                    "props": {
                                        "id": "form-controls",
                                        "sectionName": "Form Elements"
                                    },
                                    "content": [
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Button",
                                                "url-slug": "button",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Checkboxes",
                                                "url-slug": "checkbox",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Radio Button Group",
                                                "url-slug": "radiogroup",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Select Box / Listbox",
                                                "url-slug": "listbox",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Textbox",
                                                "url-slug": "textbox",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Autocomplete Combobox",
                                                "url-slug": "combobox",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Slider / Range Input",
                                                "url-slug": "slider",
                                                "alt": ""
                                            }
                                        },
                                        {
                                            "id": "flyout__link",
                                            "props": {
                                                "label": "Number Input Spinner",
                                                "url-slug": "spinner",
                                                "alt": ""
                                            }
                                        }
                                    ]
                                },
                                {
                                    "id": "flyout__subsection",
                                    "props": {
                                        "id": "form-ux-patterns",
                                        "sectionName": "Form UX Patterns"
                                    },
                                    "content": [
                                      {
                                          "id": "flyout__link",
                                          "props": {
                                              "label": "Accessible Form Structure",
                                              "url-slug": "form",
                                              "alt": ""
                                          }
                                      }, {
                                        "id": "flyout__link",
                                        "props": {
                                            "label": "Form Error Checking",
                                            "url-slug": "form-error-checking",
                                            "alt": ""
                                        }
                                      }, {
                                        "id": "flyout__link",
                                        "props": {
                                            "label": "Search Forms",
                                            "url-slug": "search",
                                            "alt": ""
                                        }
                                      },
                                      {
                                        "id": "flyout__link",
                                        "props": {
                                            "label": "Input Masking",
                                            "url-slug": "input-mask",
                                            "alt": ""
                                        }
                                      }
                                       
                                    ]

                                }
                            ]
                        }, {
                          "id": "flyout__button",
                          "props": {
                              "id": "controls",
                              "sectionName": "Controls"
                          },
                          "content": [
                            {
                              "id": "flyout__subsection",
                              "props": {
                                  "id": "simple-controls",
                                  "sectionName": "Simple Controls"
                              },
                              "content": [
                              {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Link",
                                      "url-slug": "link",
                                      "alt": ""
                                  }
                              },
                              {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Dropdown / Drawer / Expando",
                                      "url-slug": "dropdown",
                                      "alt": ""
                                  }
                              },
                              {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Tooltip",
                                      "url-slug": "tooltip",
                                      "alt": ""
                                  }
                              },
                              {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Switch",
                                      "url-slug": "switch",
                                      "alt": ""
                                  }
                              },
                              {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Skip Links",
                                      "url-slug": "skip-link",
                                      "alt": ""
                                  }
                              }
                              ]
                            },
                            {
                              "id": "flyout__subsection",
                              "props": {
                                  "id": "complex-controls",
                                  "sectionName": "Complex Controls"
                              },
                              "content": [

                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Carousel",
                                      "url-slug": "carousel",
                                      "alt": ""
                                  }
                                },
                                {
                                    "id": "flyout__link",
                                    "props": {
                                        "label": "Flyout Hamburger Menu",
                                        "url-slug": "multi-level-hamburger-menu",
                                        "alt": ""
                                    }
                                },
                                {
                                    "id": "flyout__link",
                                    "props": {
                                        "label": "Modal Dialog",
                                        "url-slug": "dialog",
                                        "alt": ""
                                    }
                                },
                                {
                                    "id": "flyout__link",
                                    "props": {
                                        "label": "Tablist",
                                        "url-slug": "tabs",
                                        "alt": ""
                                    }
                                },  {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Video Player",
                                      "url-slug": "video-player",
                                      "alt": ""
                                  }
                                }
                              ]
                            }
                          ]
                        }, 
                        {
                          "id": "flyout__button",
                          "props": {
                              "id": "content",
                              "sectionName": "Content",
                              "classes": "enable-flyout__list--photo-layout"
                          },
                          "content": [
                            {
                                "id": "flyout__subsection",
                                "props": {
                                    "id": "static-content",
                                    "sectionName": "Static Content"
                                },
                                "content": [
                                  {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Description List",
                                          "url-slug": "description-list",
                                          "alt": ""
                                      }
                                  },
                                  {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Progress Bar",
                                          "url-slug": "progress",
                                          "alt": ""
                                      }
                                  },
                                  {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Image",
                                          "url-slug": "img",
                                          "alt": ""
                                      }
                                  }, {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Figure",
                                          "url-slug": "figure",
                                          "alt": ""
                                      }
                                  }, {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Headings",
                                          "url-slug": "heading",
                                          "alt": ""
                                      }
                                  }, {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Screen Reader Only Text",
                                          "url-slug": "screen-reader-only-text",
                                          "alt": ""
                                      }
                                  }, {
                                      "id": "flyout__link",
                                      "props": {
                                          "label": "Reflow",
                                          "url-slug": "reflow",
                                          "alt": ""
                                      }
                                  }

                                ]
                            }, {
                              "id": "flyout__subsection",
                              "props": {
                                  "id": "animated-content",
                                  "sectionName": "Animated Content"
                              },
                              "content": [
                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Animated GIF/WEBP",
                                      "url-slug": "animated-gif-with-pause-button",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Pause All Animations Control",
                                      "url-slug": "pause-anim-control",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Video Content",
                                      "url-slug": "video-content",
                                      "alt": ""
                                  }
                              }
                              ]
                            }, {
                              "id": "flyout__subsection",
                              "props": {
                                  "id": "tables",
                                  "sectionName": "Tables"
                              },
                              "content": [
                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Simple Table Examples",
                                      "url-slug": "table",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Sortable Table",
                                      "url-slug": "sortable-table",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Pagination Table",
                                      "url-slug": "pagination-table",
                                      "alt": ""
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": "flyout__button",
                          "props": {
                              "id": "code-patterns",
                              "sectionName": "Code Patterns"
                          },
                          "content": [
                            {
                              "id": "flyout__subsection",
                              "props": {
                                  "id": "focus-management",
                                  "sectionName": "Focus Management"
                              },
                              "content": [
                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Form Error Checking",
                                      "url-slug": "form-error-checking",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Focus Styling Tips",
                                      "url-slug": "focus-styling",
                                      "alt": ""
                                  }
                                }
                              ]
                            }, {
                              "id": "flyout__subsection",
                              "props": {
                                "id": "typography",
                                "sectionName": "Typography"
                              },
                              "content": [
                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Basic Resizable Text",
                                      "url-slug": "text-resize",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Accessible Text Spacing",
                                      "url-slug": "text-spacing",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Resizing Text in Hero Images",
                                      "url-slug": "hero-image-text-resize",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Accessible Text in SVGs",
                                      "url-slug": "accessible-text-svg",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Exposing Style Information To Screen Readers",
                                      "url-slug": "exposing-style-info-to-screen-readers",
                                      "alt": ""
                                  }
                                }
                                
                              ]
                            }, {
                              "id": "flyout__subsection",
                              "props": {
                                "id": "aria-live-regions",
                                "sectionName": "ARIA Live Regions"
                              },
                              "content": [
                                {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Alert",
                                      "url-slug": "alert",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Log",
                                      "url-slug": "log",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Timer",
                                      "url-slug": "timer",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Marquee",
                                      "url-slug": "marquee",
                                      "alt": ""
                                  }
                                }, {
                                  "id": "flyout__link",
                                  "props": {
                                      "label": "Status",
                                      "url-slug": "status",
                                      "alt": ""
                                  }
                                }
                              ]
                            }
                          ]
                        }
                    ]
                }
            ]
        }
    ]
}
      </script>


</div>  <div role="navigation" aria-label="Pause Animation" id="enable-pause-control" data-is-sticky="top">
    <div class="play-pause-anim__checkbox-container">
        <label for="pause-anim-control">
            Pause animations
            <input type="checkbox" id="pause-anim-control" class="pause-anim-control__checkbox">
        </label>
    </div>
</div>    <main id="main" class="" tabindex="-1">

    <h1 id="accessible-code-quality--heading" tabindex="-1">Accessible Code Quality</h1><figure class="enable-quote">
  <p><strong>Thus spake the Master Programmer:</strong>
  </p><p>

  </p><p>Though a program be but three lines long, someday it will have to be maintained.</p>

  <figcaption>
    — Geoffrey James, <a href="https://www.mit.edu/~xela/tao.html"><cite>The Tao of Programming</cite></a>
  </figcaption>
</figure>


<p>Every project that is more than a few lines long should implement automated testing to ensure code quality.
  This is especially true when it comes to the accessibility features. When a developer adds accessibility features
  to code, another developer may want to change that code months later and, in doing so, may accidentally remove those
  accessibility
  features.</p>

<p>In order to prevent this from happening in Enable, we have implemented the following automated testing frameworks
  inside of Enable:</p>


<h2 id="v-nu--heading" tabindex="-1"><a class="heading__deeplink" href="#v-nu--heading" title="Permalink to v.Nu" aria-label="Permalink to v.Nu">v.Nu</a></h2>

<p>
  Before testing anything else, it is important that the HTML of the project you are working on is valid. If a developer
  produces invalid HTML, a browser's accessibility API may not have the right information for screen readers and other
  assistive technology
  to work with the page correctly.
</p>

<p>
  Enable uses <a href="https://validator.github.io/validator/">v.Nu</a> to check the HTML of all the pages within
  Enable. It does this by:
</p>

<ol>
  <li>Generating all the HTML of all the PHP pages on the site.</li>
  <li>Separating pages that initialize instantly (let's call this group "A") with ones that need a bit more processing
    time due to JavaScript use (let's call this group "B").</li>
  <li>Parsing the group A pages with v.Nu, using one call to v.Nu (since each call to the v.Nu command line tool would
    be a separate call to Java, which is expensive).</li>
  <li>Parsing the group B pages with v.Nu (each page requires a separate call to v.Nu, and thus Java).</li>
</ol>

<p>
  Note that v.Nu requires <a href="https://java.sun.com">Java</a> in order to run. If this is a concern on your project,
  you may want to
  try using <a href="https://html-validate.org/usage/">this Node based HTML validator</a> instead (I have not used this
  yet, so your mileage may vary).
</p>

<h2 id="using-axe-core-and-pa11y-ci-for-accessibility-linting--heading" tabindex="-1"><a class="heading__deeplink" href="#using-axe-core-and-pa11y-ci-for-accessibility-linting--heading" title="Permalink to Using Axe-core and Pa11y CI for Accessibility Linting" aria-label="Permalink to Using Axe-core and Pa11y CI for Accessibility Linting">Using Axe-core and Pa11y CI for Accessibility Linting</a></h2>

<p>
  Enable uses both Deque Labs' <a href="https://github.com/dequelabs/axe-core-npm/tree/develop/packages/cli">@axe-core/cli</a> as well as <a href="https://github.com/pa11y/pa11y-ci">Pa11y CI</a> to do accessibility linting. Why two? Both are very good
  tools, but they don't test for the same things, and as Craig Abbott states in this <a href="https://www.craigabbott.co.uk/blog/axe-core-vs-pa11y">excellent article that compares axe-core and pa11y</a>,
  it's hard to compare the two. So why not just use both?
</p>

<p>
  The problem with using axe-core compared to Pa11y-CI is that axe-core requires <a href="https://chromedriver.chromium.org/">Chromedriver</a> in order to work (axe-core will run pages in a headless
  version of Chrome to ensure the accessibility markup works, including any JavaScript generated markup). I have
  personally had problems with Chromedriver updates (<a href="https://github.com/dequelabs/axe-cli/issues/103">here is
    one of the issues I had in the past</a>). Pa11y, on the other hand, uses Puppeteer to launch Chrome and do its
  tests. You can read
  about <a href="https://www.testim.io/blog/puppeteer-vs-selenium/">how these two technologies differ</a>, but from my
  experience, it seems
  Chromedriver updates are more likely to break things more often than Puppeteer updates. You have been warned.
</p>

<p>
  Both tools go through all the Enable pages to check to see if colour contrast is right, alt attributes are set, ARIA
  is marked up correctly, and so on. As axe-core explicitly states after execution, automated testing can only catch
  from 20% to 50% of accessibility issues. Is there any way to improve upon that?
</p>


<h2 id="unit-testing--heading" tabindex="-1"><a class="heading__deeplink" href="#unit-testing--heading" title="Permalink to Unit Testing" aria-label="Permalink to Unit Testing">Unit Testing</a></h2>

<p>
  Unit testing is the final tool in your automated testing toolkit that you should use in your project to ensure any
  accessibility feature
  you have just implemented stays within the project. For example, if you create a custom <a href="listbox.php#aria-listbox-example--heading">accessible listbox dropdown</a>, you want to make sure that when
  keyboard users tab into the component and use the arrow keys, then they can change the selected listbox value.
</p>

<p>
  Enable currently uses <a href="https://jestjs.io/">Jest</a> with <a href="https://github.com/puppeteer/puppeteer">Puppeteer</a> to do unit tests. Usually, each test involves:
</p>

<ol>
  <li>Loading a page that contains component examples</li>
  <li>Querying the DOM on the page to make sure the components in question are coded correctly.</li>
  <li>Querying the current CSS style in the components to make sure it captures the visual requirements
    (and/or screen reader contents, when using visually-hidden CSS generated content)</li>
  <li>If needed, simulate a keyboard user manipulating the components to ensure the user-experience works correctly.
  </li>
  <li>After the component is manipulated, go through steps 2-5 again, if necessary.</li>
</ol>

<h3 id="before-we-start--heading" tabindex="-1"><a class="heading__deeplink" href="#before-we-start--heading" title="Permalink to Before we start" aria-label="Permalink to Before we start">Before we start</a></h3>

<p>
  Our unit testing examples use ES6 modules. In order to support ES6 Modules in Jest, you need to do the following
  commands inside your project:
</p>

<figure class="wide">
          
        <div class="showcode__container">
          <div class="showcode__copy">
                      </div>

          
                                    <div id="npm-info__changes-alert" class="showcode__changes-alert sr-only" role="alert" aria-live="assertive"></div>
              <div class="showcode__notes-container ">
                <div id="npm-info__notes" class="showcode__notes "></div>

                <!-- Show/hide button to be used for small breakpoints -->
                <button id="npm-info__notes-view-toggle" class="showcode__notes-view-toggle"><span class="showcode__notes-view-toggle--more">View
                  More</span><span class="showcode__notes-view-toggle--less">View Less</span>
                  <span class="sr-only">(This control is not needed for screen reader
                users.)</span>
              </button>
              </div>
              
              

              <div id="npm-info__example-desc" class="showcode__example--desc">
                <label for="npm-info__wrap-text">Wrap text</label>
                <input type="checkbox" id="npm-info__wrap-text" class="showcode__wrap-text">
                <div class="showcode__scroll-message">☜ Scroll to read full source ☞</div>
              </div>
              

          <div class="showcode showcode__has-wrapped-text-in-code">
            
            <pre class="showcode__example"><code class="showcode__example--code" data-showcode-id="npm-info" data-showcode-props="npm-info-props" tabindex="0" aria-describedby="npm-info__example-desc">npm install @babel/preset-env<br>npm install --save-dev @babel/plugin-transform-modules-commonjs</code>
                </pre>
          </div>
        </div>

        
  <figcaption>Figure 1. NPM commands to install in order to use ES6 Modules in Jest.</figcaption>
</figure>


<template id="npm-info">
  npm install @babel/preset-env
  npm install --save-dev @babel/plugin-transform-modules-commonjs
</template>

<p>
  You should also put the following lines in your <code>.babelrc</code>:
</p>

<figure class="wide">
          
        <div class="showcode__container">
          <div class="showcode__copy">
                      </div>

          
                                    <div id="babelrc-info__changes-alert" class="showcode__changes-alert sr-only" role="alert" aria-live="assertive"></div>
              <div class="showcode__notes-container ">
                <div id="babelrc-info__notes" class="showcode__notes "></div>

                <!-- Show/hide button to be used for small breakpoints -->
                <button id="babelrc-info__notes-view-toggle" class="showcode__notes-view-toggle"><span class="showcode__notes-view-toggle--more">View
                  More</span><span class="showcode__notes-view-toggle--less">View Less</span>
                  <span class="sr-only">(This control is not needed for screen reader
                users.)</span>
              </button>
              </div>
              
              

              <div id="babelrc-info__example-desc" class="showcode__example--desc">
                <label for="babelrc-info__wrap-text">Wrap text</label>
                <input type="checkbox" id="babelrc-info__wrap-text" class="showcode__wrap-text">
                <div class="showcode__scroll-message">☜ Scroll to read full source ☞</div>
              </div>
              

          <div class="showcode showcode__has-wrapped-text-in-code">
            
            <pre class="showcode__example"><code class="showcode__example--code" data-showcode-id="babelrc-info" data-showcode-props="babelrc-info-props" tabindex="0" aria-describedby="babelrc-info__example-desc">{<br>  "env": {<br>    "test": {<br>      "plugins": ["@babel/plugin-transform-modules-commonjs"]<br>    }<br>  }<br>}<br></code>
                </pre>
          </div>
        </div>

        
  <figcaption>Figure 2. What to put in .babelrc in order for Jest to transform the ES6 modules with babel.</figcaption>
</figure>

<template id="babelrc-info" data-showcode-is-js="true">{
  "env": {
    "test": {
      "plugins": ["@babel/plugin-transform-modules-commonjs"]
    }
  }
}
</template>

<h3 id="a-simple-example-having-screen-readers-read-strikethrough-text--heading" tabindex="-1"><a class="heading__deeplink" href="#a-simple-example-having-screen-readers-read-strikethrough-text--heading" title="Permalink to A Simple Example: Having Screen Readers Read Strikethrough Text" aria-label="Permalink to A Simple Example: Having Screen Readers Read Strikethrough Text">A Simple Example: Having Screen Readers Read Strikethrough Text</a></h3>

<p>Let's look at a simple example that just involves just steps 1 through 3. If you look at the page for <a href="exposing-style-info-to-screen-readers.php">Exposing Style Information To Screen Readers</a>, we use
  visually-hidden content inside of <code>mark</code> tags. We want to
  ensure that a new developer that contributes code to Enable never removes this <a href="screen-reader-only-text.php">screen reader only text</a> by accident, so we create a jest
  test file, <code>exposing-style-info-to-screen-readers.test.js</code>, to ensure we can test that this CSS is in these
  example. Let's walk through this file to show how it works.

  <template id="test-code-walkthrough" data-showcode-is-js="true">
    <!--
'use strict'

import config from './test-config.js';
import testHelpers from './test-helpers.js';

describe('Styled Elements Tests', () => {
  it('Initial page load HTML matches snapshot', async () => {
    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);
    await testHelpers.testPageSnapshot(page);
  });

  it('Detect if there is sr-only content in the mark tags in the visually hidden text example', async () => {
    let domInfo;

    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);

    // The area of the page that has the product tile
    await page.waitForSelector('#sr-only-text-example');

      // check the DOM to see if the visually hidden CSS generated content is there.    
    domInfo = await page.evaluate(() => {
      const markEls = document.querySelectorAll('#sr-only-text-example mark');
      let hasMissingMarkContent = false;
      

      for (let i=0; i<markEls.length; i++) {
        const firstElementChild = markEls[i].firstElementChild;

        if (!firstElementChild.classList.contains('sr-only')) {
          hasMissingMarkContent = true;
        }
      }

      return {
        numMarkTests: markEls.length,
        hasMissingMarkContent
      };
    });

    expect(domInfo.numMarkTests).toBeGreaterThan(0);
    expect(domInfo.hasMissingMarkContent).toBe(false);
  });

  it('Detect if there are sr-only content inside the highlighted text of the Enable code walkthroughs', async () => {
    let domInfo;

    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);

    // The area of the page that has the highlighted code
    await page.waitForSelector('#highlight-example');

    // check the DOM to see if the visually hidden CSS generated content is there.    
    domInfo = await page.evaluate(() => {
      const markEls = document.querySelectorAll('#highlight-example mark');
      let hasMissingBeginningContent = false;
      let hasMissingEndContent = false;

      for (let i=0; i<markEls.length; i++) {
        const { firstElementChild, lastElementChild } = markEls[i];

        if (!firstElementChild.classList.contains('sr-only')) {
          hasMissingBeginningContent = true;
        }

        if (!lastElementChild.classList.contains('sr-only')) {
          hasMissingEndContent = true;
        }
      }

      return {
        numTests: markEls.length,
        hasMissingBeginningContent,
        hasMissingEndContent
      };
    });

    expect(domInfo.numTests).toBeGreaterThan(0);
    expect(domInfo.hasMissingBeginningContent).toBe(false);
    expect(domInfo.hasMissingEndContent).toBe(false);
  });
});
-->
  </template>

          
        </p><div class="showcode__container">
          <div class="showcode__copy">
                        <h4 id="developer-walkthrough-3" tabindex="-1" class="showcode__heading"><a class="heading__deeplink" href="#developer-walkthrough-3" title="Permalink to Code Walkthrough of the Above Example" aria-label="Permalink to Code Walkthrough of the Above Example">Code Walkthrough of the Above Example</a></h4>

            <p>
              Below is the HTML of the above example. Use the dropdown
              to highlight each of the individual steps that makes the
              example accessible.
            </p>

                                  </div>

                              
                        <div class="showcode__ui">
                                      <div id="test-code-walkthrough__steps" class="showcode__steps"><label for="test-code-walkthrough__steps--select" class="showcode__select-label">Code to highlight:</label><select class="showcode__select" id="test-code-walkthrough__steps--select" data-showcode-for="test-code-walkthrough" data-replace-html-rules="{}"><option value=""></option><option value="import\\sconfig[^;]*;" data-showcode-notes="This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you ">Step #1: Import Test Config</option><option value="describe[\\s\\S]*\\}\\);" data-showcode-notes="">Step #2: Create a describe for the set of tests you are creating.</option><option value="\\s+it\\([\\s\\S]*?>\\s\\s\\}\\);" data-showcode-notes="Note the second parameter of the <code>it()</code> function is an <strong>asynchronous</code> function">Step #3: Create a test for each tag to be tested (ins, del and mark)</option><option value="\\s*await\\spage.goto[^;]*;" data-showcode-notes="Note that the <code>BASE_URL</code> is grabbed from the <code>config</code> from step 1">Step #4: Each test must load the page</option><option value="\\s*await\\spage.waitForSelector[^;]*;" data-showcode-notes="Note that the selector used should be unique enough so you know you are hitting the right area of the page.">Step #5: Each test should wait until the part of the page you need is available to test</option><option value="\\s*domInfo\\s=[\\s\\S]*?>\\s\\s\\s\\s\\}\\);" data-showcode-notes="<div>Although <a href=&quot;https://jestjs.io/docs/tutorial-jquery&quot;>Jest can do basic DOM manipulation and testing</a>, it doesn't have good enough support for ARIA, <a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle&quot;>window.getCurrentStyle()</a> and other web technologies that will allow us to find out if a web component is exposing the right information to browsers and screen readers to ensure our work is accessible.  Using <a href=&quot;https://pptr.dev/api/puppeteer.page.evaluate/&quot;>Puppeteer's <code>page.evaluate()</code> method</a> ensures that we are using these APIs and more to fully test our work in a real (headless) web browser. The information we need to test on is returned as an object, which is passed to the variable <code>domInfo</code>.</div>">Step #6: Query the DOM using puppeteer's page.evaluate method.</option><option value="expect\\([^;]*;" data-showcode-notes="We take the information given to <code>domInfo</code> in the previous step and run tests on it using jest's <code>expect()</code> method.">Step #7: Use jest's expect method to find if the code is doing things right.</option></select></div>
                          <div id="test-code-walkthrough__changes-alert" class="showcode__changes-alert sr-only" role="alert" aria-live="assertive"></div>
              <div class="showcode__notes-container ">
                <div id="test-code-walkthrough__notes" class="showcode__notes "></div>

                <!-- Show/hide button to be used for small breakpoints -->
                <button id="test-code-walkthrough__notes-view-toggle" class="showcode__notes-view-toggle"><span class="showcode__notes-view-toggle--more">View
                  More</span><span class="showcode__notes-view-toggle--less">View Less</span>
                  <span class="sr-only">(This control is not needed for screen reader
                users.)</span>
              </button>
              </div>
              
              

              <div id="test-code-walkthrough__example-desc" class="showcode__example--desc">
                <label for="test-code-walkthrough__wrap-text">Wrap text</label>
                <input type="checkbox" id="test-code-walkthrough__wrap-text" class="showcode__wrap-text">
                <div class="showcode__scroll-message">☜ Scroll to read full source ☞</div>
              </div>
                            </div>

          <div class="showcode showcode__has-wrapped-text-in-code">
            
            <pre class="showcode__example"><code class="showcode__example--code" data-showcode-id="test-code-walkthrough" data-showcode-props="test-code-walkthrough-props" tabindex="0" aria-describedby="test-code-walkthrough__example-desc"><br>'use strict'<br><br>import config from './test-config.js';<br>import testHelpers from './test-helpers.js';<br><br>describe('Styled Elements Tests', () =&gt; {<br>  it('Initial page load HTML matches snapshot', async () =&gt; {<br>    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);<br>    await testHelpers.testPageSnapshot(page);<br>  });<br><br>  it('Detect if there is sr-only content in the mark tags in the visually hidden text example', async () =&gt; {<br>    let domInfo;<br><br>    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);<br><br>    // The area of the page that has the product tile<br>    await page.waitForSelector('#sr-only-text-example');<br><br>      // check the DOM to see if the visually hidden CSS generated content is there.    <br>    domInfo = await page.evaluate(() =&gt; {<br>      const markEls = document.querySelectorAll('#sr-only-text-example mark');<br>      let hasMissingMarkContent = false;<br>      <br><br>      for (let i=0; i&lt;markEls.length; i++) {<br>        const firstElementChild = markEls[i].firstElementChild;<br><br>        if (!firstElementChild.classList.contains('sr-only')) {<br>          hasMissingMarkContent = true;<br>        }<br>      }<br><br>      return {<br>        numMarkTests: markEls.length,<br>        hasMissingMarkContent<br>      };<br>    });<br><br>    expect(domInfo.numMarkTests).toBeGreaterThan(0);<br>    expect(domInfo.hasMissingMarkContent).toBe(false);<br>  });<br><br>  it('Detect if there are sr-only content inside the highlighted text of the Enable code walkthroughs', async () =&gt; {<br>    let domInfo;<br><br>    await page.goto(\`\${config.BASE_URL}/exposing-style-info-to-screen-readers.php\`);<br><br>    // The area of the page that has the highlighted code<br>    await page.waitForSelector('#highlight-example');<br><br>    // check the DOM to see if the visually hidden CSS generated content is there.    <br>    domInfo = await page.evaluate(() =&gt; {<br>      const markEls = document.querySelectorAll('#highlight-example mark');<br>      let hasMissingBeginningContent = false;<br>      let hasMissingEndContent = false;<br><br>      for (let i=0; i&lt;markEls.length; i++) {<br>        const { firstElementChild, lastElementChild } = markEls[i];<br><br>        if (!firstElementChild.classList.contains('sr-only')) {<br>          hasMissingBeginningContent = true;<br>        }<br><br>        if (!lastElementChild.classList.contains('sr-only')) {<br>          hasMissingEndContent = true;<br>        }<br>      }<br><br>      return {<br>        numTests: markEls.length,<br>        hasMissingBeginningContent,<br>        hasMissingEndContent<br>      };<br>    });<br><br>    expect(domInfo.numTests).toBeGreaterThan(0);<br>    expect(domInfo.hasMissingBeginningContent).toBe(false);<br>    expect(domInfo.hasMissingEndContent).toBe(false);<br>  });<br>});<br></code>
                </pre>
          </div>
        </div>

          <script type="application/json" id="test-code-walkthrough-props">
  {
    "replaceHtmlRules": {},
    "steps": [{
        "label": "Import Test Config",
        "highlight": "import\\\\sconfig[^;]*;",
        "notes": "This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you "
      },
      {
        "label": "Create a describe for the set of tests you are creating.",
        "highlight": "describe[\\\\s\\\\S]*\\\\}\\\\);",
        "notes": ""
      },
      {
        "label": "Create a test for each tag to be tested (ins, del and mark)",
        "highlight": "\\\\s+it\\\\([\\\\s\\\\S]*?>\\\\s\\\\s\\\\}\\\\);",
        "notes": "Note the second parameter of the <code>it()</code> function is an <strong>asynchronous</code> function"
      },
      {
        "label": "Each test must load the page",
        "highlight": "\\\\s*await\\\\spage.goto[^;]*;",
        "notes": "Note that the <code>BASE_URL</code> is grabbed from the <code>config</code> from step 1"
      },
      {
        "label": "Each test should wait until the part of the page you need is available to test",
        "highlight": "\\\\s*await\\\\spage.waitForSelector[^;]*;",
        "notes": "Note that the selector used should be unique enough so you know you are hitting the right area of the page."
      },
      {
        "label": "Query the DOM using puppeteer's page.evaluate method.",
        "highlight": "\\\\s*domInfo\\\\s=[\\\\s\\\\S]*?>\\\\s\\\\s\\\\s\\\\s\\\\}\\\\);",
        "notes": "<div>Although <a href=\\"https://jestjs.io/docs/tutorial-jquery\\">Jest can do basic DOM manipulation and testing</a>, it doesn't have good enough support for ARIA, <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\\">window.getCurrentStyle()</a> and other web technologies that will allow us to find out if a web component is exposing the right information to browsers and screen readers to ensure our work is accessible.  Using <a href=\\"https://pptr.dev/api/puppeteer.page.evaluate/\\">Puppeteer's <code>page.evaluate()</code> method</a> ensures that we are using these APIs and more to fully test our work in a real (headless) web browser. The information we need to test on is returned as an object, which is passed to the variable <code>domInfo</code>.</div>"
      },
      {
        "label": "Use jest's expect method to find if the code is doing things right.",
        "highlight": "expect\\\\([^;]*;",
        "notes": "We take the information given to <code>domInfo</code> in the previous step and run tests on it using jest's <code>expect()</code> method."
      }
    ]
  }
  </script>

  <h3 id="a-simple-interactive-example-switches--heading" tabindex="-1"><a class="heading__deeplink" href="#a-simple-interactive-example-switches--heading" title="Permalink to A Simple Interactive Example: Switches" aria-label="Permalink to A Simple Interactive Example: Switches">A Simple Interactive Example: Switches</a></h3>

  <p>This example is used to test <a href="switch.php">Enable's switch component</a> to ensure that it is keyboard accessible and that the HTML structure includes all the necessary accessibility features (e.g. the <code>role="switch"</code>, a valid <code>aria-checked</code> attribute set, a proper label, etc.).  Please go through the code walkthrough below for more details.

<template id="switch-test-code-walkthrough" data-showcode-is-js="true">
    <!--
'use strict'

import config from './test-config.js';
import testHelpers from './test-helpers.js';

describe('ARIA Switch Tests', () => {
  // This is a function used by the tests below to grab the aria-checked value
  // of the nth ARIA switch on the page
  async function getSwitchValue(n) {
    return await page.evaluate((n) => {
      const switchEls = document.querySelectorAll('[role="switch"]');
      const switchEl = switchEls[n];

      return switchEl.getAttribute('aria-checked');
    }, n);
  } // end getSwitchValue()


  it('Initial page load HTML matches snapshot', async () => {
    await page.goto(\`\${config.BASE_URL}/switch.php\`);
    await testHelpers.testPageSnapshot(page);
  });

  // Test #1
  it('See if all ARIA switches on page are keyboard accessible', async () => {
    let ariaChecked, domInfo;

    await page.goto(\`\${config.BASE_URL}/switch.php\`);

    // wait until all content loads
    await page.waitForSelector('#example1');

    const switchesInPage = Array.from(await page.$$('[role="switch"]')).length;
    expect(switchesInPage).toBeGreaterThan(0);
    
    for (let i=0; i <switchesInPage; i++) {
      //focus the switch 
      domInfo = await page.evaluate((i) => {
        const switchEls = document.querySelectorAll('[role="switch"]');
        const switchEl = switchEls[i];
        const ariaLabelledby = switchEl.getAttribute('aria-labelledby');
        const ariaLabel = switchEl.getAttribute('aria-label');
        const ariaChecked = switchEl.getAttribute('aria-checked');
        const { id } = switchEl;
        let label = null;
        const labelTag = document.querySelector(\`label[for="\${id}"\`);

        if (ariaLabelledby !== null) {
          const ariaLabelledbyEl = document.getElementById(ariaLabelledby);

          if (ariaLabelledbyEl !== null) {
            label = ariaLabelledbyEl.innerText.trim();
          }
        } else if (ariaLabel !== null) {
          label = ariaLabel.trim();
        } else if (labelTag !== null) {
          label = labelTag.innerText.trim();
        }

        switchEl.focus();

        return {
          isTabbable: document.activeElement === switchEl,
          hasLabel: label !== null && label !== '',
          isAriaCheckedSet: ariaChecked === 'true' || ariaChecked == 'false',
          ariaChecked
        }
      }, i);

      expect(domInfo.isTabbable).toBe(true);
      expect(domInfo.hasLabel).toBe(true);
      expect(domInfo.isAriaCheckedSet).toBe(true);

      const origAriaChecked = domInfo.ariaChecked;
      const notOrigAriaChecked = (domInfo.ariaChecked === 'true' ? 'false' : 'true');

  
      // press space and check if it's unchecked.
      await page.keyboard.press('Space');
      
      ariaChecked = await getSwitchValue(i);
      expect(ariaChecked).toBe(notOrigAriaChecked);
  
      // press space again and check if it's unchecked.
      await page.keyboard.press('Space');
      
      ariaChecked = await getSwitchValue(i);
      expect(ariaChecked).toBe(origAriaChecked);
    }
  });
});-->
  </template>

          
        </p><div class="showcode__container">
          <div class="showcode__copy">
                        <h4 id="developer-walkthrough-4" tabindex="-1" class="showcode__heading"><a class="heading__deeplink" href="#developer-walkthrough-4" title="Permalink to Code Walkthrough of the Above Example" aria-label="Permalink to Code Walkthrough of the Above Example">Code Walkthrough of the Above Example</a></h4>

            <p>
              Below is the HTML of the above example. Use the dropdown
              to highlight each of the individual steps that makes the
              example accessible.
            </p>

                                  </div>

                              
                        <div class="showcode__ui">
                                      <div id="switch-test-code-walkthrough__steps" class="showcode__steps"><label for="switch-test-code-walkthrough__steps--select" class="showcode__select-label">Code to highlight:</label><select class="showcode__select" id="switch-test-code-walkthrough__steps--select" data-showcode-for="switch-test-code-walkthrough" data-replace-html-rules="{}"><option value=""></option><option value="import\\sconfig[^;]*;" data-showcode-notes="This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you ">Step #1: Import Test Config</option><option value="describe[\\s\\S]*\\}\\);" data-showcode-notes="">Step #2: Create a describe for the set of tests you are creating.</option><option value="\\s+it\\([\\s\\S]*?>\\s\\s\\}\\);" data-showcode-notes="Note the second parameter of the <code>it()</code> function is an <strong>asynchronous</code> function">Step #3: Create a test by using the it() function</option><option value="\\s*await\\spage.goto[^;]*;" data-showcode-notes="Note that the <code>BASE_URL</code> is grabbed from the <code>config</code> from step 1">Step #4: Each test must load the page</option><option value="\\s*await\\spage.waitForSelector[^;]*;" data-showcode-notes="Note that the selector used should be unique enough so your know you are hitting the right area of the page.">Step #5: Each test should wait until the part of the page you need is available to test</option><option value="\\s*domInfo\\s=[\\s\\S]*\\},\\si\\);" data-showcode-notes="<div>Although <a href=&quot;https://jestjs.io/docs/tutorial-jquery&quot;>Jest can do basic DOM manipulation and testing</a>, it doesn't have good enough support for ARIA, <a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle&quot;>window.getCurrentStyle()</a> and other web technologies that will allow us to find out if a web component is exposing the right information to browsers and screen readers to ensure our work is accessible.  Using <a href=&quot;https://pptr.dev/api/puppeteer.page.evaluate/&quot;>Puppeteer's <code>page.evaluate()</code> method</a> ensures that to use these APIs and more to fully test our work in a real (headless) web browser. The information we need to test on is returned as an object, which is passed to the variable <code>domInfo</code>.</div>">Step #6: Query the DOM using puppeteer's page.evaluate method.</option><option value="expect\\([^;]*;" data-showcode-notes="We take the information given to <code>domInfo</code> in the previous step and run tests on it using jest's <code>expect()</code> method.">Step #7: Use jest's expect method to find if the code is doing things right.</option><option value="\\s*async\\sfunction\\sgetSwitchValue[\\s\\S]*end\\sgetSwitchValue\\(\\)" data-showcode-notes="">Step #8: Note the helper function to get the checked value of a switch</option></select></div>
                          <div id="switch-test-code-walkthrough__changes-alert" class="showcode__changes-alert sr-only" role="alert" aria-live="assertive"></div>
              <div class="showcode__notes-container ">
                <div id="switch-test-code-walkthrough__notes" class="showcode__notes "></div>

                <!-- Show/hide button to be used for small breakpoints -->
                <button id="switch-test-code-walkthrough__notes-view-toggle" class="showcode__notes-view-toggle"><span class="showcode__notes-view-toggle--more">View
                  More</span><span class="showcode__notes-view-toggle--less">View Less</span>
                  <span class="sr-only">(This control is not needed for screen reader
                users.)</span>
              </button>
              </div>
              
              

              <div id="switch-test-code-walkthrough__example-desc" class="showcode__example--desc">
                <label for="switch-test-code-walkthrough__wrap-text">Wrap text</label>
                <input type="checkbox" id="switch-test-code-walkthrough__wrap-text" class="showcode__wrap-text">
                <div class="showcode__scroll-message">☜ Scroll to read full source ☞</div>
              </div>
                            </div>

          <div class="showcode showcode__has-wrapped-text-in-code">
            
            <pre class="showcode__example"><code class="showcode__example--code" data-showcode-id="switch-test-code-walkthrough" data-showcode-props="switch-test-code-walkthrough-props" tabindex="0" aria-describedby="switch-test-code-walkthrough__example-desc"><br>'use strict'<br><br>import config from './test-config.js';<br>import testHelpers from './test-helpers.js';<br><br>describe('ARIA Switch Tests', () =&gt; {<br>  // This is a function used by the tests below to grab the aria-checked value<br>  // of the nth ARIA switch on the page<br>  async function getSwitchValue(n) {<br>    return await page.evaluate((n) =&gt; {<br>      const switchEls = document.querySelectorAll('[role="switch"]');<br>      const switchEl = switchEls[n];<br><br>      return switchEl.getAttribute('aria-checked');<br>    }, n);<br>  } // end getSwitchValue()<br><br><br>  it('Initial page load HTML matches snapshot', async () =&gt; {<br>    await page.goto(\`\${config.BASE_URL}/switch.php\`);<br>    await testHelpers.testPageSnapshot(page);<br>  });<br><br>  // Test #1<br>  it('See if all ARIA switches on page are keyboard accessible', async () =&gt; {<br>    let ariaChecked, domInfo;<br><br>    await page.goto(\`\${config.BASE_URL}/switch.php\`);<br><br>    // wait until all content loads<br>    await page.waitForSelector('#example1');<br><br>    const switchesInPage = Array.from(await page.$$('[role="switch"]')).length;<br>    expect(switchesInPage).toBeGreaterThan(0);<br>    <br>    for (let i=0; i &lt;switchesInPage; i++) {<br>      //focus the switch <br>      domInfo = await page.evaluate((i) =&gt; {<br>        const switchEls = document.querySelectorAll('[role="switch"]');<br>        const switchEl = switchEls[i];<br>        const ariaLabelledby = switchEl.getAttribute('aria-labelledby');<br>        const ariaLabel = switchEl.getAttribute('aria-label');<br>        const ariaChecked = switchEl.getAttribute('aria-checked');<br>        const { id } = switchEl;<br>        let label = null;<br>        const labelTag = document.querySelector(\`label[for="\${id}"\`);<br><br>        if (ariaLabelledby !== null) {<br>          const ariaLabelledbyEl = document.getElementById(ariaLabelledby);<br><br>          if (ariaLabelledbyEl !== null) {<br>            label = ariaLabelledbyEl.innerText.trim();<br>          }<br>        } else if (ariaLabel !== null) {<br>          label = ariaLabel.trim();<br>        } else if (labelTag !== null) {<br>          label = labelTag.innerText.trim();<br>        }<br><br>        switchEl.focus();<br><br>        return {<br>          isTabbable: document.activeElement === switchEl,<br>          hasLabel: label !== null &amp;&amp; label !== '',<br>          isAriaCheckedSet: ariaChecked === 'true' || ariaChecked == 'false',<br>          ariaChecked<br>        }<br>      }, i);<br><br>      expect(domInfo.isTabbable).toBe(true);<br>      expect(domInfo.hasLabel).toBe(true);<br>      expect(domInfo.isAriaCheckedSet).toBe(true);<br><br>      const origAriaChecked = domInfo.ariaChecked;<br>      const notOrigAriaChecked = (domInfo.ariaChecked === 'true' ? 'false' : 'true');<br><br>  <br>      // press space and check if it's unchecked.<br>      await page.keyboard.press('Space');<br>      <br>      ariaChecked = await getSwitchValue(i);<br>      expect(ariaChecked).toBe(notOrigAriaChecked);<br>  <br>      // press space again and check if it's unchecked.<br>      await page.keyboard.press('Space');<br>      <br>      ariaChecked = await getSwitchValue(i);<br>      expect(ariaChecked).toBe(origAriaChecked);<br>    }<br>  });<br>});</code>
                </pre>
          </div>
        </div>

          <script type="application/json" id="switch-test-code-walkthrough-props">
  {
    "replaceHtmlRules": {},
    "steps": [{
        "label": "Import Test Config",
        "highlight": "import\\\\sconfig[^;]*;",
        "notes": "This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you "
      },
      {
        "label": "Create a describe for the set of tests you are creating.",
        "highlight": "describe[\\\\s\\\\S]*\\\\}\\\\);",
        "notes": ""
      },
      {
        "label": "Create a test by using the it() function",
        "highlight": "\\\\s+it\\\\([\\\\s\\\\S]*?>\\\\s\\\\s\\\\}\\\\);",
        "notes": "Note the second parameter of the <code>it()</code> function is an <strong>asynchronous</code> function"
      },
      {
        "label": "Each test must load the page",
        "highlight": "\\\\s*await\\\\spage.goto[^;]*;",
        "notes": "Note that the <code>BASE_URL</code> is grabbed from the <code>config</code> from step 1"
      },
      {
        "label": "Each test should wait until the part of the page you need is available to test",
        "highlight": "\\\\s*await\\\\spage.waitForSelector[^;]*;",
        "notes": "Note that the selector used should be unique enough so your know you are hitting the right area of the page."
      },
      {
        "label": "Query the DOM using puppeteer's page.evaluate method.",
        "highlight": "\\\\s*domInfo\\\\s=[\\\\s\\\\S]*\\\\},\\\\si\\\\);",
        "notes": "<div>Although <a href=\\"https://jestjs.io/docs/tutorial-jquery\\">Jest can do basic DOM manipulation and testing</a>, it doesn't have good enough support for ARIA, <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\\">window.getCurrentStyle()</a> and other web technologies that will allow us to find out if a web component is exposing the right information to browsers and screen readers to ensure our work is accessible.  Using <a href=\\"https://pptr.dev/api/puppeteer.page.evaluate/\\">Puppeteer's <code>page.evaluate()</code> method</a> ensures that to use these APIs and more to fully test our work in a real (headless) web browser. The information we need to test on is returned as an object, which is passed to the variable <code>domInfo</code>.</div>"
      },
      {
        "label": "Use jest's expect method to find if the code is doing things right.",
        "highlight": "expect\\\\([^;]*;",
        "notes": "We take the information given to <code>domInfo</code> in the previous step and run tests on it using jest's <code>expect()</code> method."
      },
      {
        "label": "Note the helper function to get the checked value of a switch",
        "highlight": "\\\\s*async\\\\sfunction\\\\sgetSwitchValue[\\\\s\\\\S]*end\\\\sgetSwitchValue\\\\(\\\\)"
      }
    ]
  }
  </script>

  <h3 id="a-more-complex-example-testing-focus-states-on-multiple-pages--heading" tabindex="-1"><a class="heading__deeplink" href="#a-more-complex-example-testing-focus-states-on-multiple-pages--heading" title="Permalink to A More Complex Example: Testing Focus States on Multiple Pages" aria-label="Permalink to A More Complex Example: Testing Focus States on Multiple Pages">A More Complex Example: Testing Focus States on Multiple Pages</a></h3>

  <p>This is an example of a test that ensures all interactive elements on all the pages within Enable have a focus state (in our case, using a CSS \`outline\`).
Note that we ignore <code>iframe</code>, <code>video</code> and <code>body</code> tags in this test because of the tests giving false negatives (which we are actively looking into to fix)</p>

  <template id="test-code-walkthrough2" data-showcode-is-js="true">
    <!--
'use strict'

import config from './test-config.js';
import testHelpers from './test-helpers.js';

const fileList = testHelpers.getPageList();
let mobileBrowser, desktopBrowser;

describe('Test Focus States on all pages on Enable', () => {
  beforeAll(async () => {
    // Put code here that should execute before starting tests.
    desktopBrowser = await testHelpers.getDesktopBrowser();
    mobileBrowser = await testHelpers.getMobileBrowser();
  });

  afterAll(async () => {
    await mobileBrowser.close();
    await desktopBrowser.close();
  });

  async function testPage(filename, isDesktop) {
    let domInfo, tabStops = 0, page;

    if (isDesktop) {
      page = await desktopBrowser.newPage();
    } else {
      page = await mobileBrowser.newPage();
    }

    // Wait until the DOM is fully loaded.
    await page.goto(\`\${config.BASE_URL}/\${filename}\`, {waitUntil: 'domcontentloaded'});
    
    // Let's loop through all the tabstops on the page.
    do {

      // Let's simulate a tab press
      await page.keyboard.press('Tab');

      // Now let's see if there is a focus ring around the
      // focused element.
      domInfo = await page.evaluate(() => {
        const { activeElement } = document;

        // grab outline CSS style property
        const style = window.getComputedStyle(activeElement, null);
        let { outline, outlineColor, outlineWidth, outlineStyle } = style;
        let hasFocusRing = (outlineStyle !== 'none' && parseInt(outlineWidth) !== 0 && outlineColor !== 'transparent');
        let checkedPseudoEl = false;

        const isIframe = (activeElement.nodeName === 'IFRAME');
        const isVideo = (activeElement.nodeName === 'VIDEO');

        // Special tests for range element
        const isRangeInput = (activeElement.nodeName === 'INPUT' && activeElement.getAttribute('type') === 'range');
        
        if (isRangeInput && !hasFocusRing) {
          let rangeThumbSlideStyle = window.getComputedStyle(activeElement, '::-webkit-slider-thumb');
          checkedPseudoEl = true;
          outline = rangeThumbSlideStyle.outline;
          outlineColor = rangeThumbSlideStyle.outlineColor;
          outlineWidth = rangeThumbSlideStyle.outlineWidth;
          outlineStyle = rangeThumbSlideStyle.outlineStyle;
          hasFocusRing = (outlineStyle !== 'none' && parseInt(outlineWidth) !== 0);
        }
        // end of special tests.

        return {
          html: activeElement.outerHTML,
          hasFocusRing,
          outline,
          outlineColor,
          outlineWidth,
          outlineStyle,
          isEnableSkipLink: activeElement.classList.contains('enable-mobile-visible-on-focus'),
          isBody: activeElement === document.body,
          isIframe,
          isVideo,
          isRangeInput,
          checkedPseudoEl
        }

      });

      // If this is not a skip link (which has its own test suite),
      // and not a body, video or iframe tag (which don't report their
      // valid focus states in puppeteer for some reason).
      if (!domInfo.isEnableSkipLink && !domInfo.isBody && !domInfo.isVideo && !domInfo.isIframe) {

        // If the focused element doesn't have a focus ring, output why.
        if (!domInfo.hasFocusRing) {
          console.log('Bad focus on: ', domInfo.html);
          console.log('Checked Pseudo element', domInfo.checkedPseudoEl);
          console.log(\`outlineColor: \${domInfo.outlineColor}\\noutline: \${domInfo.outline}\\noutlineWidth: \${domInfo.outlineWidth}\\noutlineStyle: \${domInfo.outlineStyle}\`);
        }

        // The expect test so jest logs it as an error.
        expect(domInfo.hasFocusRing).toBe(true);
      } 
    } while (!domInfo.isBody);

    page.close();
  }
  // end testPage()

  
  // This goes through all the URLs in the site and
  // runs testPage() on it twice, one in the desktop
  // browser and one in the mobile.
  for (let i=0; i<fileList.length; i++) {
    const file = fileList[i];
    it(\`Desktop Breakpoint: Test focus states on \${file}\`, async () => {
      await testPage(file, true);
    });
    it(\`Mobile Breakpoint: Test focus states on \${file}\`, async () => {
      await testPage(file, false);
    });
  }
});-->
  </template>

          
        <div class="showcode__container">
          <div class="showcode__copy">
                        <h4 id="developer-walkthrough-5" tabindex="-1" class="showcode__heading"><a class="heading__deeplink" href="#developer-walkthrough-5" title="Permalink to Code Walkthrough of the Above Example" aria-label="Permalink to Code Walkthrough of the Above Example">Code Walkthrough of the Above Example</a></h4>

            <p>
              Below is the HTML of the above example. Use the dropdown
              to highlight each of the individual steps that makes the
              example accessible.
            </p>

                                  </div>

                              
                        <div class="showcode__ui">
                                      <div id="test-code-walkthrough2__steps" class="showcode__steps"><label for="test-code-walkthrough2__steps--select" class="showcode__select-label">Code to highlight:</label><select class="showcode__select" id="test-code-walkthrough2__steps--select" data-showcode-for="test-code-walkthrough2" data-replace-html-rules="{}"><option value=""></option><option value="import\\sconfig[^;]*;" data-showcode-notes="This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you ">Step #1: Import Test Config</option><option value="describe[\\s\\S]*\\}\\);" data-showcode-notes="">Step #2: Create a describe for the set of tests you are creating.</option><option value="\\s\\sbeforeAll[^\\}]*\\}\\);" data-showcode-notes="">Step #3: Open up two browser instances when starting this test suite.</option><option value="\\s\\safterAll[^\\}]*\\}\\);" data-showcode-notes="">Step #4: Close the two browsers when finishing this test suite.</option><option value="\\s\\sasync\\sfunction\\stestPage[\\s\\S]*end\\stestPage\\(\\)" data-showcode-notes="">Step #5: Define the testPage() function.</option><option value="\\s\\s\\s\\sif\\s\\(isDesktop\\)([^\\}]*\\}){2}" data-showcode-notes="">Step #6: Have the appropriate browser window open the page to test</option><option value="\\s{4}await\\spage.goto[^;]*;" data-showcode-notes="Note that we want this test to run as soon as the browser is ready, so we tell page.goto to <code>waitUntil</code> the <code>domcontentloaded</code> event occurs on the page (i.e. when the browsers loads the HTML in the DOM)">Step #7: Each test must load the page</option><option value="\\s*domInfo\\s=[\\s\\S]*?>\\s\\s\\s\\s\\}\\);" data-showcode-notes="This <code>page.evaluate()</code> call tests to see if the currently focused element has a focus ring. It also detects if it is a video or an iframe.">Step #8: Query the DOM using puppeteer's page.evaluate method.</option><option value="const\\s\\{\\sactiveElement\\s\\}\\s=\\sdocument;" data-showcode-notes="">Step #9: Find the focused element</option><option value="\\s*const\\sstyle[\\s\\S]*=\\sstyle;" data-showcode-notes="">Step #10: Find the style of the focused element</option><option value="\\s*\\/\\/\\sSpecial\\stests\\sfor\\srange\\selement[\\s\\S]*\\/\\/\\send\\sof\\sspecial\\stests." data-showcode-notes="">Step #11: We have a special case for the input range element</option><option value="\\s*\\/\\/\\sIf\\sthis\\sis\\snot\\sa\\sskip\\slink[\\s\\S]*\\s{6}\\}" data-showcode-notes="Note: we only log an issue if it is not a <code>body</code>, <code>iframe</code> or <code>video</code> tag, since these report false negatives.">Step #12: We test to see if the focused element has a focus ring.</option><option value="\\s\\s\\/\\/\\sThis\\sgoes\\sthrough[\\s\\S]*\\s\\s\\}" data-showcode-notes="Note that it is running testPage() twice &amp;mdash; once for desktop and once for mobile.">Step #13: Run testPage() on all the pages on the site.</option></select></div>
                          <div id="test-code-walkthrough2__changes-alert" class="showcode__changes-alert sr-only" role="alert" aria-live="assertive"></div>
              <div class="showcode__notes-container ">
                <div id="test-code-walkthrough2__notes" class="showcode__notes "></div>

                <!-- Show/hide button to be used for small breakpoints -->
                <button id="test-code-walkthrough2__notes-view-toggle" class="showcode__notes-view-toggle"><span class="showcode__notes-view-toggle--more">View
                  More</span><span class="showcode__notes-view-toggle--less">View Less</span>
                  <span class="sr-only">(This control is not needed for screen reader
                users.)</span>
              </button>
              </div>
              
              

              <div id="test-code-walkthrough2__example-desc" class="showcode__example--desc">
                <label for="test-code-walkthrough2__wrap-text">Wrap text</label>
                <input type="checkbox" id="test-code-walkthrough2__wrap-text" class="showcode__wrap-text">
                <div class="showcode__scroll-message">☜ Scroll to read full source ☞</div>
              </div>
                            </div>

          <div class="showcode showcode__has-wrapped-text-in-code">
            
            <pre class="showcode__example"><code class="showcode__example--code" data-showcode-id="test-code-walkthrough2" data-showcode-props="test-code-walkthrough2-props" tabindex="0" aria-describedby="test-code-walkthrough2__example-desc"><br>'use strict'<br><br>import config from './test-config.js';<br>import testHelpers from './test-helpers.js';<br><br>const fileList = testHelpers.getPageList();<br>let mobileBrowser, desktopBrowser;<br><br>describe('Test Focus States on all pages on Enable', () =&gt; {<br>  beforeAll(async () =&gt; {<br>    // Put code here that should execute before starting tests.<br>    desktopBrowser = await testHelpers.getDesktopBrowser();<br>    mobileBrowser = await testHelpers.getMobileBrowser();<br>  });<br><br>  afterAll(async () =&gt; {<br>    await mobileBrowser.close();<br>    await desktopBrowser.close();<br>  });<br><br>  async function testPage(filename, isDesktop) {<br>    let domInfo, tabStops = 0, page;<br><br>    if (isDesktop) {<br>      page = await desktopBrowser.newPage();<br>    } else {<br>      page = await mobileBrowser.newPage();<br>    }<br><br>    // Wait until the DOM is fully loaded.<br>    await page.goto(\`\${config.BASE_URL}/\${filename}\`, {waitUntil: 'domcontentloaded'});<br>    <br>    // Let's loop through all the tabstops on the page.<br>    do {<br><br>      // Let's simulate a tab press<br>      await page.keyboard.press('Tab');<br><br>      // Now let's see if there is a focus ring around the<br>      // focused element.<br>      domInfo = await page.evaluate(() =&gt; {<br>        const { activeElement } = document;<br><br>        // grab outline CSS style property<br>        const style = window.getComputedStyle(activeElement, null);<br>        let { outline, outlineColor, outlineWidth, outlineStyle } = style;<br>        let hasFocusRing = (outlineStyle !== 'none' &amp;&amp; parseInt(outlineWidth) !== 0 &amp;&amp; outlineColor !== 'transparent');<br>        let checkedPseudoEl = false;<br><br>        const isIframe = (activeElement.nodeName === 'IFRAME');<br>        const isVideo = (activeElement.nodeName === 'VIDEO');<br><br>        // Special tests for range element<br>        const isRangeInput = (activeElement.nodeName === 'INPUT' &amp;&amp; activeElement.getAttribute('type') === 'range');<br>        <br>        if (isRangeInput &amp;&amp; !hasFocusRing) {<br>          let rangeThumbSlideStyle = window.getComputedStyle(activeElement, '::-webkit-slider-thumb');<br>          checkedPseudoEl = true;<br>          outline = rangeThumbSlideStyle.outline;<br>          outlineColor = rangeThumbSlideStyle.outlineColor;<br>          outlineWidth = rangeThumbSlideStyle.outlineWidth;<br>          outlineStyle = rangeThumbSlideStyle.outlineStyle;<br>          hasFocusRing = (outlineStyle !== 'none' &amp;&amp; parseInt(outlineWidth) !== 0);<br>        }<br>        // end of special tests.<br><br>        return {<br>          html: activeElement.outerHTML,<br>          hasFocusRing,<br>          outline,<br>          outlineColor,<br>          outlineWidth,<br>          outlineStyle,<br>          isEnableSkipLink: activeElement.classList.contains('enable-mobile-visible-on-focus'),<br>          isBody: activeElement === document.body,<br>          isIframe,<br>          isVideo,<br>          isRangeInput,<br>          checkedPseudoEl<br>        }<br><br>      });<br><br>      // If this is not a skip link (which has its own test suite),<br>      // and not a body, video or iframe tag (which don't report their<br>      // valid focus states in puppeteer for some reason).<br>      if (!domInfo.isEnableSkipLink &amp;&amp; !domInfo.isBody &amp;&amp; !domInfo.isVideo &amp;&amp; !domInfo.isIframe) {<br><br>        // If the focused element doesn't have a focus ring, output why.<br>        if (!domInfo.hasFocusRing) {<br>          console.log('Bad focus on: ', domInfo.html);<br>          console.log('Checked Pseudo element', domInfo.checkedPseudoEl);<br>          console.log(\`outlineColor: \${domInfo.outlineColor}\\noutline: \${domInfo.outline}\\noutlineWidth: \${domInfo.outlineWidth}\\noutlineStyle: \${domInfo.outlineStyle}\`);<br>        }<br><br>        // The expect test so jest logs it as an error.<br>        expect(domInfo.hasFocusRing).toBe(true);<br>      } <br>    } while (!domInfo.isBody);<br><br>    page.close();<br>  }<br>  // end testPage()<br><br>  <br>  // This goes through all the URLs in the site and<br>  // runs testPage() on it twice, one in the desktop<br>  // browser and one in the mobile.<br>  for (let i=0; i&lt;fileList.length; i++) {<br>    const file = fileList[i];<br>    it(\`Desktop Breakpoint: Test focus states on \${file}\`, async () =&gt; {<br>      await testPage(file, true);<br>    });<br>    it(\`Mobile Breakpoint: Test focus states on \${file}\`, async () =&gt; {<br>      await testPage(file, false);<br>    });<br>  }<br>});</code>
                </pre>
          </div>
        </div>

          <script type="application/json" id="test-code-walkthrough2-props">
  {
    "replaceHtmlRules": {},
    "steps": [{
        "label": "Import Test Config",
        "highlight": "import\\\\sconfig[^;]*;",
        "notes": "This imports the configuration settings all the tests use.  Note that in order for jest to support ES Modules to import JavaScript libraries, you "
      },
      {
        "label": "Create a describe for the set of tests you are creating.",
        "highlight": "describe[\\\\s\\\\S]*\\\\}\\\\);",
        "notes": ""
      },
      {
        "label": "Open up two browser instances when starting this test suite.",
        "highlight": "\\\\s\\\\sbeforeAll[^\\\\}]*\\\\}\\\\);",
        "notes": ""
      },
      {
        "label": "Close the two browsers when finishing this test suite.",
        "highlight": "\\\\s\\\\safterAll[^\\\\}]*\\\\}\\\\);",
        "notes": ""
      },
      {
        "label": "Define the testPage() function.",
        "highlight": "\\\\s\\\\sasync\\\\sfunction\\\\stestPage[\\\\s\\\\S]*end\\\\stestPage\\\\(\\\\)",
        "notes": ""
      },
      {
        "label": "Have the appropriate browser window open the page to test",
        "highlight": "\\\\s\\\\s\\\\s\\\\sif\\\\s\\\\(isDesktop\\\\)([^\\\\}]*\\\\}){2}",
        "notes": ""
      },
      {
        "label": "Each test must load the page",
        "highlight": "\\\\s{4}await\\\\spage.goto[^;]*;",
        "notes": "Note that we want this test to run as soon as the browser is ready, so we tell page.goto to <code>waitUntil</code> the <code>domcontentloaded</code> event occurs on the page (i.e. when the browsers loads the HTML in the DOM)"
      },
      {
        "label": "Query the DOM using puppeteer's page.evaluate method.",
        "highlight": "\\\\s*domInfo\\\\s=[\\\\s\\\\S]*?>\\\\s\\\\s\\\\s\\\\s\\\\}\\\\);",
        "notes": "This <code>page.evaluate()</code> call tests to see if the currently focused element has a focus ring. It also detects if it is a video or an iframe."
      },
      {
        "label": "Find the focused element",
        "highlight": "const\\\\s\\\\{\\\\sactiveElement\\\\s\\\\}\\\\s=\\\\sdocument;",
        "notes": ""
      },
      {
        "label": "Find the style of the focused element",
        "highlight": "\\\\s*const\\\\sstyle[\\\\s\\\\S]*=\\\\sstyle;",
        "notes": ""
      },
      {
        "label": "We have a special case for the input range element",
        "highlight": "\\\\s*\\\\/\\\\/\\\\sSpecial\\\\stests\\\\sfor\\\\srange\\\\selement[\\\\s\\\\S]*\\\\/\\\\/\\\\send\\\\sof\\\\sspecial\\\\stests.",
        "notes": ""
      },
      {
        "label": "We test to see if the focused element has a focus ring.",
        "highlight": "\\\\s*\\\\/\\\\/\\\\sIf\\\\sthis\\\\sis\\\\snot\\\\sa\\\\sskip\\\\slink[\\\\s\\\\S]*\\\\s{6}\\\\}",
        "notes": "Note: we only log an issue if it is not a <code>body</code>, <code>iframe</code> or <code>video</code> tag, since these report false negatives."
      },
      {
        "label": "Run testPage() on all the pages on the site.",
        "highlight": "\\\\s\\\\s\\\\/\\\\/\\\\sThis\\\\sgoes\\\\sthrough[\\\\s\\\\S]*\\\\s\\\\s\\\\}",
        "notes": "Note that it is running testPage() twice &mdash; once for desktop and once for mobile."
      }
    ]
  }
  </script>

<p>
  If you want to do some further reading, we recommend <a href="https://www.24a11y.com/2017/writing-automated-tests-accessibility/">Writing Automated Tests for
    Accessibility</a> by <a href="https://www.deque.com/blog/author/marcy-sutton/">Marcie Sutton</a> and <a href="https://medium.com/walkme-engineering/web-accessibility-testing-d499a7f7a032">Web Accessibility Testing</a> by
  <a href="https://www.kfirzuberi.com/">Kfir Zuberi</a>. They are great places to start (it's where we started).
</p>  </main>

    
        <footer aria-label="Copyright Information">
            
        Enable is a labour of love created by
        <a href="https://useragentman.com">Zoltan Hawryluk</a>.  It has been released as open
        source so hopefully others can learn from it.  This content is covered by the the <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International Licence</a>.

    </footer> 
        

    <!-- indent won't load as a module, even though the docs say it can -->
    <script src="js/enable-libs/indent.min.js"></script>
    <script src="js/global.js" type="module"></script>
    

</body></html>"
`;
